buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1x'
    }
}

apply plugin: 'com.android.application'

apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'com.neenbedankt.android-apt'

apply plugin: "jacoco"

apply plugin: 'com.github.kt3k.coveralls'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion 22
    buildToolsVersion "22.0.0"

    defaultConfig {
        applicationId "it.cosenonjaviste.testableandroidapps"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.test {
        resources.srcDirs = ["src/test/resources"]
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.google.dagger:dagger:2.0'
    compile 'io.reactivex:rxandroid-framework:0.24.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'org.glassfish:javax.annotation:10.0-b28'
    compile 'org.parceler:parceler-api:0.2.15'
    apt 'com.google.dagger:dagger-compiler:2.0'
    apt 'org.parceler:parceler:0.2.15'

    androidTestApt 'com.google.dagger:dagger-compiler:2.0'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile('com.google.dexmaker:dexmaker-mockito:1.2') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.0') {
        exclude group: 'javax.inject', module: 'javax.inject'
        exclude group: 'com.squareup', module: 'javawriter'
    }
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile 'com.google.dagger:dagger-compiler:2.0'
    testCompile 'org.javassist:javassist:3.19.0-GA'
}

def coverageSourceDirs = [
        'src/main/java',
        'src/gen'
]

task jacocoUnitTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = false
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/BuildConfig.class',
                       '**/*$*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')
}